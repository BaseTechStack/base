basePath: /api/v1
definitions:
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      expires_in:
        type: integer
      first_name:
        type: string
      last_login:
        type: string
      last_name:
        type: string
      token_type:
        type: string
      user_id:
        type: integer
    type: object
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  auth.ResetPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  auth.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  file.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  file.UploadResult:
    properties:
      filename:
        type: string
      path:
        type: string
      size:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  users.CreateRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  users.CreateResponse:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  users.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  users.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  users.UpdateRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  users.UpdateResponse:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  users.User:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for Base
  title: Base API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request a password reset token
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Request password reset
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: User login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the input payload
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register a new user
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using a token
      parameters:
      - description: Reset Password
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset password
      tags:
      - Core/Auth
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/file.UploadResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/file.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload a file
      tags:
      - Core/FileUpload
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List User
      tags:
      - Core/Users
    post:
      consumes:
      - application/json
      description: Create a new User with the input payload
      parameters:
      - description: Create User
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/users.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new User
      tags:
      - Core/Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a User
      tags:
      - Core/Users
    get:
      consumes:
      - application/json
      description: Get a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a User
      tags:
      - Core/Users
    put:
      consumes:
      - application/json
      description: Update a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/users.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a User
      tags:
      - Core/Users
  /ws:
    get:
      consumes:
      - application/json
      description: Establishes a WebSocket connection
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Connect to WebSocket
      tags:
      - Core/Websocket
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Api-Key
    type: apiKey
swagger: "2.0"
