basePath: /api/v1
definitions:
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      expires_in:
        type: integer
      first_name:
        type: string
      last_login:
        type: string
      last_name:
        type: string
      token_type:
        type: string
      user_id:
        type: integer
    type: object
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  auth.ResetPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  auth.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  authors.AuthorResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  authors.CreateAuthorRequest:
    properties:
      name:
        type: string
    type: object
  authors.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  authors.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  authors.UpdateAuthorRequest:
    properties:
      name:
        type: string
    type: object
  categories.CategoryResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  categories.CreateCategoryRequest:
    properties:
      name:
        type: string
    type: object
  categories.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  categories.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  categories.UpdateCategoryRequest:
    properties:
      name:
        type: string
    type: object
  comments.CommentResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  comments.CreateCommentRequest:
    properties:
      name:
        type: string
    type: object
  comments.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  comments.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  comments.UpdateCommentRequest:
    properties:
      name:
        type: string
    type: object
  file.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  file.UploadResult:
    properties:
      filename:
        type: string
      path:
        type: string
      size:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  posts.CreatePostRequest:
    properties:
      authorId:
        type: integer
      categoryId:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  posts.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  posts.PostResponse:
    properties:
      author:
        $ref: '#/definitions/authors.AuthorResponse'
      authorId:
        type: integer
      category:
        $ref: '#/definitions/categories.CategoryResponse'
      categoryId:
        type: integer
      comment:
        items:
          $ref: '#/definitions/comments.CommentResponse'
        type: array
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
  posts.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  posts.UpdatePostRequest:
    properties:
      authorId:
        type: integer
      categoryId:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  users.CreateRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  users.CreateResponse:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  users.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  users.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  users.UpdateRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  users.UpdateResponse:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  users.User:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for Base
  title: Base API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request a password reset token
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Request password reset
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: User login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the input payload
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register a new user
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using a token
      parameters:
      - description: Reset Password
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset password
      tags:
      - Core/Auth
  /authors:
    get:
      consumes:
      - application/json
      description: Get a list of all Author
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/authors.AuthorResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List Author
      tags:
      - App/Author
    post:
      consumes:
      - application/json
      description: Create a new Author with the input payload
      parameters:
      - description: Create Author
        in: body
        name: authors
        required: true
        schema:
          $ref: '#/definitions/authors.CreateAuthorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authors.AuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Author
      tags:
      - App/Author
  /authors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Author by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authors.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Author
      tags:
      - App/Author
    get:
      consumes:
      - application/json
      description: Get a Author by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authors.AuthorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Author
      tags:
      - App/Author
    put:
      consumes:
      - application/json
      description: Update a Author by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Author
        in: body
        name: authors
        required: true
        schema:
          $ref: '#/definitions/authors.UpdateAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authors.AuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Author
      tags:
      - App/Author
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of all Category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/categories.CategoryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List Category
      tags:
      - App/Category
    post:
      consumes:
      - application/json
      description: Create a new Category with the input payload
      parameters:
      - description: Create Category
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/categories.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/categories.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Category
      tags:
      - App/Category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Category by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categories.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Category
      tags:
      - App/Category
    get:
      consumes:
      - application/json
      description: Get a Category by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categories.CategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Category
      tags:
      - App/Category
    put:
      consumes:
      - application/json
      description: Update a Category by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/categories.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categories.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Category
      tags:
      - App/Category
  /comments:
    get:
      consumes:
      - application/json
      description: Get a list of all Comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/comments.CommentResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List Comment
      tags:
      - App/Comment
    post:
      consumes:
      - application/json
      description: Create a new Comment with the input payload
      parameters:
      - description: Create Comment
        in: body
        name: comments
        required: true
        schema:
          $ref: '#/definitions/comments.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/comments.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Comment
      tags:
      - App/Comment
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Comment by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comments.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Comment
      tags:
      - App/Comment
    get:
      consumes:
      - application/json
      description: Get a Comment by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comments.CommentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Comment
      tags:
      - App/Comment
    put:
      consumes:
      - application/json
      description: Update a Comment by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Comment
        in: body
        name: comments
        required: true
        schema:
          $ref: '#/definitions/comments.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comments.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/comments.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Comment
      tags:
      - App/Comment
  /posts:
    get:
      consumes:
      - application/json
      description: Get a list of all Post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/posts.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List Post
      tags:
      - App/Post
    post:
      consumes:
      - application/json
      description: Create a new Post with the input payload
      parameters:
      - description: Create Post
        in: body
        name: posts
        required: true
        schema:
          $ref: '#/definitions/posts.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/posts.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Post
      tags:
      - App/Post
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Post by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Post
      tags:
      - App/Post
    get:
      consumes:
      - application/json
      description: Get a Post by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.PostResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Post
      tags:
      - App/Post
    put:
      consumes:
      - application/json
      description: Update a Post by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Post
        in: body
        name: posts
        required: true
        schema:
          $ref: '#/definitions/posts.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Post
      tags:
      - App/Post
  /posts/{id}/author:
    get:
      consumes:
      - application/json
      description: Get all associated Author for a specific Post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/authors.AuthorResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get associated Author for a Post
      tags:
      - App/Post
  /posts/{id}/comments:
    get:
      consumes:
      - application/json
      description: Get all associated Comment for a specific Post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/comments.CommentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get associated Comment for a Post
      tags:
      - App/Post
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/file.UploadResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/file.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload a file
      tags:
      - Core/FileUpload
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List User
      tags:
      - Core/Users
    post:
      consumes:
      - application/json
      description: Create a new User with the input payload
      parameters:
      - description: Create User
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/users.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new User
      tags:
      - Core/Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a User
      tags:
      - Core/Users
    get:
      consumes:
      - application/json
      description: Get a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a User
      tags:
      - Core/Users
    put:
      consumes:
      - application/json
      description: Update a User by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/users.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a User
      tags:
      - Core/Users
  /ws:
    get:
      consumes:
      - application/json
      description: Establishes a WebSocket connection
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Connect to WebSocket
      tags:
      - Core/Websocket
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Api-Key
    type: apiKey
swagger: "2.0"
