basePath: /api
definitions:
  auth.AuthResponse:
    properties:
      accessToken:
        type: string
      avatar:
        $ref: '#/definitions/storage.Attachment'
      email:
        type: string
      exp:
        type: integer
      id:
        type: integer
      last_login:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    type: object
  auth.ResetPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  auth.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  categories.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  categories.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.CategoryResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      image:
        $ref: '#/definitions/storage.Attachment'
      posts:
        items:
          $ref: '#/definitions/models.PostResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateCategoryRequest:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  models.CreatePostRequest:
    properties:
      category_id_id:
        type: integer
      content:
        type: string
      title:
        type: string
    required:
    - category_id_id
    - content
    - title
    type: object
  models.PostResponse:
    properties:
      category_id:
        $ref: '#/definitions/models.CategoryResponse'
      category_id_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      image:
        $ref: '#/definitions/storage.Attachment'
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateCategoryRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  models.UpdatePostRequest:
    properties:
      category_id_id:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  oauth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  posts.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  posts.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  storage.Attachment:
    properties:
      created_at:
        type: string
      field:
        type: string
      filename:
        type: string
      id:
        type: integer
      model_id:
        type: integer
      model_type:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  types.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  users.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  users.UpdatePasswordRequest:
    properties:
      NewPassword:
        minLength: 6
        type: string
      OldPassword:
        type: string
    required:
    - NewPassword
    - OldPassword
    type: object
  users.UpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  users.User:
    properties:
      avatar:
        $ref: '#/definitions/storage.Attachment'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact: {}
  description: This is the API documentation for Albafone
  title: Base API
  version: "1.5"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset password
      parameters:
      - description: Forgot Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Forgot Password
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using token
      parameters:
      - description: Reset Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset Password
      tags:
      - Core/Auth
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of categories
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term for filtering results
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new Category with the input payload
      parameters:
      - description: Create Category request
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Category
      tags:
      - Category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Category by its id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categories.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get a Category by its id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Category
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update a Category by its id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category request
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Category
      tags:
      - Category
  /categories/{id}/image:
    put:
      consumes:
      - multipart/form-data
      description: Upload Image for a Category by its id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categories.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload Image for a Category
      tags:
      - Category
  /categories/all:
    get:
      consumes:
      - application/json
      description: Get a list of all categories without pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/categories.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all categories
      tags:
      - Category
  /oauth/facebook/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Facebook
      parameters:
      - description: Facebook Access Token
        in: body
        name: accessToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Facebook OAuth callback
      tags:
      - Core/OAuth
  /oauth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Google
      parameters:
      - description: Google ID Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Google OAuth callback
      tags:
      - Core/OAuth
  /posts:
    get:
      consumes:
      - application/json
      description: Get a list of posts
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term for filtering results
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List posts
      tags:
      - Post
    post:
      consumes:
      - application/json
      description: Create a new Post with the input payload
      parameters:
      - description: Create Post request
        in: body
        name: posts
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new Post
      tags:
      - Post
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Post by its id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a Post
      tags:
      - Post
    get:
      consumes:
      - application/json
      description: Get a Post by its id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a Post
      tags:
      - Post
    put:
      consumes:
      - application/json
      description: Update a Post by its id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Post request
        in: body
        name: posts
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a Post
      tags:
      - Post
  /posts/{id}/image:
    put:
      consumes:
      - multipart/form-data
      description: Upload Image for a Post by its id
      parameters:
      - description: Post id
        in: path
        name: id
        required: true
        type: integer
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/posts.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload Image for a Post
      tags:
      - Post
  /posts/all:
    get:
      consumes:
      - application/json
      description: Get a list of all posts without pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/posts.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all posts
      tags:
      - Post
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Core/Users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Core/Users
  /users/{id}/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update user avatar
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user avatar
      tags:
      - Core/Users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update user password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Password Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user password
      tags:
      - Core/Users
  /ws:
    get:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Api-Key
    type: apiKey
swagger: "2.0"
