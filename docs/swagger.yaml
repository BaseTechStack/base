basePath: /api
definitions:
  auth.AuthResponse:
    properties:
      accessToken:
        type: string
      avatar:
        $ref: '#/definitions/storage.Attachment'
      email:
        type: string
      exp:
        type: integer
      id:
        type: integer
      last_login:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: '@Description User''s email address'
        example: john@example.com
        type: string
      name:
        description: '@Description User''s full name'
        example: John Doe
        type: string
      password:
        description: '@Description Password for the account (minimum 8 characters)'
        example: password123
        minLength: 8
        type: string
      username:
        description: '@Description Username for the account'
        example: johndoe
        type: string
    required:
    - email
    - password
    type: object
  auth.ResetPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  auth.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  media.MediaListResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  media.MediaResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  oauth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  storage.Attachment:
    properties:
      created_at:
        type: string
      field:
        type: string
      filename:
        type: string
      id:
        type: integer
      model_id:
        type: integer
      model_type:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  types.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  users.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  users.UpdatePasswordRequest:
    properties:
      NewPassword:
        minLength: 6
        type: string
      OldPassword:
        type: string
    required:
    - NewPassword
    - OldPassword
    type: object
  users.UpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  users.User:
    properties:
      avatar:
        $ref: '#/definitions/storage.Attachment'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8001
info:
  contact: {}
  description: This is the API documentation for Base
  title: Base API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset password
      parameters:
      - description: Forgot Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Forgot Password
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using token
      parameters:
      - description: Reset Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset Password
      tags:
      - Core/Auth
  /media:
    get:
      description: Get a paginated list of media items
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List media items
      tags:
      - Core/Media
    post:
      consumes:
      - multipart/form-data
      description: Create a new media item with optional file upload
      parameters:
      - description: Media name
        in: formData
        name: name
        required: true
        type: string
      - description: Media type
        in: formData
        name: type
        required: true
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new media item
      tags:
      - Core/Media
  /media/{id}:
    delete:
      description: Delete a media item and its associated file
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a media item
      tags:
      - Core/Media
    get:
      description: Get a media item by ID
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a media item
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update a media item's details and optionally its file
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Media name
        in: formData
        name: name
        type: string
      - description: Media type
        in: formData
        name: type
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a media item
      tags:
      - Core/Media
  /media/{id}/file:
    delete:
      description: Remove the file attached to a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Remove media file
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update the file attached to a media item
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Media file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update media file
      tags:
      - Core/Media
  /media/all:
    get:
      description: Get an unpaginated list of all media items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/media.MediaListResponse'
            type: array
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all media items
      tags:
      - Core/Media
  /oauth/apple/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Apple
      parameters:
      - description: Apple ID Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Apple OAuth callback
      tags:
      - Core/OAuth
  /oauth/facebook/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Facebook
      parameters:
      - description: Facebook Access Token
        in: body
        name: accessToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Facebook OAuth callback
      tags:
      - Core/OAuth
  /oauth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Google
      parameters:
      - description: Google ID Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Google OAuth callback
      tags:
      - Core/OAuth
  /users/me:
    get:
      consumes:
      - application/json
      description: Get user by Bearer Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get user from Authenticated User Token
      tags:
      - Core/Users
    put:
      consumes:
      - application/json
      description: Update user by Bearer Token
      parameters:
      - description: Update Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update user from Authenticated User Token
      tags:
      - Core/Users
  /users/me/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update user avatar by Bearer Token
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update user avatar from Authenticated User Token
      tags:
      - Core/Users
  /users/me/password:
    put:
      consumes:
      - application/json
      description: Update user password by Bearer Token
      parameters:
      - description: Update Password Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/users.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update user password from Authenticated User Token
      tags:
      - Core/Users
  /ws:
    get:
      consumes:
      - application/json
      description: 'Establishes a WebSocket connection, check example at: /static/chat.html'
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      - description: User Nickname
        in: query
        name: nickname
        type: string
      - description: Chat Room
        in: query
        name: room
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Connect to WebSocket
      tags:
      - Core/Websocket
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API Key for authentication
    in: header
    name: X-Api-Key
    type: apiKey
  BearerAuth:
    description: Enter your token with the prefix "Bearer "
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
