#!/bin/bash

# BaseUI Development Server
# Runs both Vite dev server and Go server concurrently

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[BaseUI]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[BaseUI]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[BaseUI]${NC} $1"
}

print_error() {
    echo -e "${RED}[BaseUI]${NC} $1"
}

# Function to cleanup processes on exit
cleanup() {
    print_status "Shutting down development servers..."
    if [ ! -z "$VITE_PID" ]; then
        kill $VITE_PID 2>/dev/null || true
    fi
    if [ ! -z "$GO_PID" ]; then
        kill $GO_PID 2>/dev/null || true
    fi
    exit 0
}

# Set up trap to cleanup on exit
trap cleanup SIGINT SIGTERM

# Check if we're in the correct directory
if [ ! -f "main.go" ]; then
    print_error "main.go not found. Please run this script from the project root."
    exit 1
fi

if [ ! -d "ui" ]; then
    print_error "ui/ directory not found. Please ensure BaseUI is set up."
    exit 1
fi

print_status "Starting BaseUI Development Environment..."

# Check for Bun first, fall back to npm
if command -v bun &> /dev/null; then
    PACKAGE_MANAGER="bun"
    INSTALL_CMD="bun install"
    DEV_CMD="bun run dev"
    BUILD_CMD="bun run build"
    print_success "Using Bun package manager"
else
    PACKAGE_MANAGER="npm"
    INSTALL_CMD="npm install"
    DEV_CMD="npm run dev"
    BUILD_CMD="npm run build"
    print_warning "Bun not found, using npm (consider installing Bun for better performance)"
fi

# Check if dependencies are installed
if [ ! -d "ui/node_modules" ]; then
    print_warning "Dependencies not found. Installing with ${PACKAGE_MANAGER}..."
    cd ui
    
    # Try installation with retry logic
    RETRY_COUNT=0
    MAX_RETRIES=3
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        print_status "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
        
        if $INSTALL_CMD; then
            print_success "Dependencies installed with ${PACKAGE_MANAGER}!"
            break
        else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                print_warning "Installation failed. Retrying in 5 seconds..."
                sleep 5
                
                # Try different registry on retry
                if [ "$PACKAGE_MANAGER" = "bun" ]; then
                    print_status "Trying with npm registry mirror..."
                    export BUN_CONFIG_REGISTRY="https://registry.npmmirror.com"
                    INSTALL_CMD="bun install"
                elif [ "$PACKAGE_MANAGER" = "npm" ]; then
                    print_status "Trying with npm registry mirror..."
                    INSTALL_CMD="npm install --registry=https://registry.npmmirror.com"
                fi
            else
                print_error "Failed to install dependencies after $MAX_RETRIES attempts."
                print_error "This might be due to network issues or npm registry problems."
                echo ""
                echo "üîß Try these solutions:"
                echo "  1. Check your internet connection"
                echo "  2. Try again later (npm registry might be down)"
                echo "  3. Use a different registry:"
                if [ "$PACKAGE_MANAGER" = "bun" ]; then
                    echo "     bun config set registry https://registry.npmmirror.com"
                else
                    echo "     npm config set registry https://registry.npmmirror.com"
                fi
                echo "  4. Clear cache and try again:"
                if [ "$PACKAGE_MANAGER" = "bun" ]; then
                    echo "     bun pm cache rm"
                else
                    echo "     npm cache clean --force"
                fi
                cd ..
                exit 1
            fi
        fi
    done
    
    cd ..
fi

# Set environment variable for development
export ENVIRONMENT=development
export GIN_MODE=debug
export SERVER_ADDRESS=":8080"

print_status "Environment: ${ENVIRONMENT}"

# Kill any existing processes on our ports
print_status "Checking for existing processes on ports 8080 and 5173..."
for port in 8080 5173 8000 8001; do
    if lsof -ti:$port > /dev/null 2>&1; then
        print_warning "Killing existing process on port $port..."
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
        sleep 1
    fi
done

# Start Vite dev server in background
print_status "Starting Vite dev server on http://localhost:5173 with ${PACKAGE_MANAGER}..."
cd ui
$DEV_CMD &
VITE_PID=$!
cd ..

# Wait a moment for Vite to start
sleep 2

# Check if Vite started successfully
if ! curl -s http://localhost:5173 > /dev/null 2>&1; then
    print_warning "Vite dev server may take a moment to start..."
fi

# Start Go server in background
print_status "Starting Go server on http://localhost:8080..."
go run main.go &
GO_PID=$!

# Wait a moment for Go server to start
sleep 3

# Check if Go server started successfully
if curl -s http://localhost:8080 > /dev/null 2>&1; then
    print_success "‚ú® BaseUI Development Environment Ready!"
    echo ""
    echo -e "${CYAN}üöÄ Development URLs:${NC}"
    echo -e "   ${GREEN}Web Application:${NC}  http://localhost:8080"
    echo -e "   ${GREEN}Vite Dev Server:${NC}  http://localhost:5173"
    echo ""
    echo -e "${CYAN}üìù Development Features:${NC}"
    echo -e "   ${YELLOW}‚Ä¢${NC} Hot Module Reload (HMR)"
    echo -e "   ${YELLOW}‚Ä¢${NC} Live CSS injection"
    echo -e "   ${YELLOW}‚Ä¢${NC} Component auto-refresh"
    echo -e "   ${YELLOW}‚Ä¢${NC} TypeScript compilation"
    echo ""
    echo -e "${PURPLE}Press Ctrl+C to stop all servers${NC}"
    echo ""
else
    print_error "Failed to start Go server. Check for port conflicts or compilation errors."
    cleanup
    exit 1
fi

# Keep the script running and wait for processes
wait