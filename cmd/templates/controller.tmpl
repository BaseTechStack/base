package {{.RouteName}}

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type {{.StructName}}Controller struct {
	{{.StructName}}Service *{{.StructName}}Service
}

func New{{.StructName}}Controller(service *{{.StructName}}Service) *{{.StructName}}Controller {
	return &{{.StructName}}Controller{
		{{.StructName}}Service: service,
	}
}

func (c *{{.StructName}}Controller) Routes(router *gin.RouterGroup) {
	router.GET("/{{.RouteName}}", c.List)
	router.GET("/{{.RouteName}}/:id", c.Get)
	router.POST("/{{.RouteName}}", c.Create)
	router.PUT("/{{.RouteName}}/:id", c.Update)
	router.DELETE("/{{.RouteName}}/:id", c.Delete)
}

// Create{{.StructName}} godoc
// @Summary Create a new {{.StructName}}
// @Description Create a new {{.StructName}} with the input payload
// @Tags {{.RouteName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param {{.RouteName}} body CreateRequest true "Create {{.StructName}}"
// @Success 201 {object} CreateResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{.RouteName}} [post]
func (c *{{.StructName}}Controller) Create(ctx *gin.Context) {
	var req CreateRequest
	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
		return
	}

	item, err := c.{{.StructName}}Service.Create(&req)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to create item"})
		return
	}

	ctx.JSON(http.StatusCreated, item)
}

// Get{{.StructName}} godoc
// @Summary Get a {{.StructName}}
// @Description Get a {{.StructName}} by its ID
// @Tags {{.RouteName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} {{.StructName}}
// @Failure 404 {object} ErrorResponse
// @Router /{{.RouteName}}/{id} [get]
func (c *{{.StructName}}Controller) Get(ctx *gin.Context) {
	id, _ := strconv.Atoi(ctx.Param("id"))
	item, err := c.{{.StructName}}Service.GetByID(uint(id))
	if err != nil {
		ctx.JSON(http.StatusNotFound, ErrorResponse{Error: "Item not found"})
		return
	}

	ctx.JSON(http.StatusOK, item)
}

// List{{.StructName}} godoc
// @Summary List {{.StructName}}
// @Description Get a list of all {{.StructName}}
// @Tags {{.RouteName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Success 200 {array} {{.StructName}}
// @Failure 500 {object} ErrorResponse
// @Router /{{.RouteName}} [get]
func (c *{{.StructName}}Controller) List(ctx *gin.Context) {
	items, err := c.{{.StructName}}Service.GetAll()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch items"})
		return
	}

	ctx.JSON(http.StatusOK, items)
}

// Update{{.StructName}} godoc
// @Summary Update a {{.StructName}}
// @Description Update a {{.StructName}} by its ID
// @Tags {{.RouteName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param {{.RouteName}} body UpdateRequest true "Update {{.StructName}}"
// @Success 200 {object} UpdateResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{.RouteName}}/{id} [put]
func (c *{{.StructName}}Controller) Update(ctx *gin.Context) {
	id, _ := strconv.Atoi(ctx.Param("id"))
	var req UpdateRequest
	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
		return
	}

	item, err := c.{{.StructName}}Service.Update(uint(id), &req)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to update item"})
		return
	}

	ctx.JSON(http.StatusOK, item)
}

// Delete{{.StructName}} godoc
// @Summary Delete a {{.StructName}}
// @Description Delete a {{.StructName}} by its ID
// @Tags {{.RouteName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} SuccessResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{.RouteName}}/{id} [delete]
func (c *{{.StructName}}Controller) Delete(ctx *gin.Context) {
	id, _ := strconv.Atoi(ctx.Param("id"))
	if err := c.{{.StructName}}Service.Delete(uint(id)); err != nil {
		ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to delete item"})
		return
	}

	ctx.JSON(http.StatusOK, SuccessResponse{Message: "Item deleted successfully"})
}

type ErrorResponse struct {
	Error string `json:"error"`
}

type SuccessResponse struct {
	Message string `json:"message"`
}