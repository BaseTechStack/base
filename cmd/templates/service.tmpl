package {{.RouteName}}

import (
	"errors"

	"gorm.io/gorm"
)

type {{.StructName}}Service struct {
	DB *gorm.DB
}

func New{{.StructName}}Service(db *gorm.DB) *{{.StructName}}Service {
	return &{{.StructName}}Service{
		DB: db,
	}
}

func (s *{{.StructName}}Service) Create(req *CreateRequest) (*CreateResponse, error) {
	item := {{.StructName}}{
		{{- range .Fields}}
		{{.Name}}: req.{{.Name}},
		{{- end}}
	}
	if err := s.DB.Create(&item).Error; err != nil {
		return nil, err
	}
	return &CreateResponse{
		Model: item.Model,
		{{- range .Fields}}
		{{.Name}}: item.{{.Name}},
		{{- end}}
	}, nil
}

func (s *{{.StructName}}Service) GetByID(id uint) (*{{.StructName}}, error) {
	var item {{.StructName}}
	if err := s.DB.First(&item, id).Error; err != nil {
		return nil, err
	}
	return &item, nil
}

func (s *{{.StructName}}Service) GetAll() ([]{{.StructName}}, error) {
	var items []{{.StructName}}
	if err := s.DB.Find(&items).Error; err != nil {
		return nil, err
	}
	return items, nil
}

func (s *{{.StructName}}Service) Update(id uint, req *UpdateRequest) (*UpdateResponse, error) {
	item, err := s.GetByID(id)
	if err != nil {
		return nil, err
	}

	{{- range .Fields}}
	item.{{.Name}} = req.{{.Name}}
	{{- end}}
	if err := s.DB.Save(item).Error; err != nil {
		return nil, err
	}
	return &UpdateResponse{
		Model: item.Model,
		{{- range .Fields}}
		{{.Name}}: item.{{.Name}},
		{{- end}}
	}, nil
}

func (s *{{.StructName}}Service) Delete(id uint) error {
	result := s.DB.Delete(&{{.StructName}}{}, id)
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return errors.New("item not found")
	}
	return nil
}